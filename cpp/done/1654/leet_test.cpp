#include "leet.cpp"

#include <gtest/gtest.h>

#include <cassert>

#include "glog/logging.h"
#include "glog/stl_logging.h"

TEST(kk, t1) {
  Solution sol;
  vector<int> forbidden = {14, 4, 18, 1, 15};
  int a = 3, b = 15, x = 9;
  EXPECT_EQ(sol.minimumJumps(forbidden, a, b, x), 3);
}

TEST(kk, t2) {
  Solution sol;
  vector<int> forbidden = {8, 3, 16, 6, 12, 20};
  int a = 15, b = 13, x = 11;
  EXPECT_EQ(sol.minimumJumps(forbidden, a, b, x), -1);
}

TEST(kk, t3) {
  Solution sol;
  vector<int> forbidden = {1, 6, 2, 14, 5, 17, 4};
  int a = 16, b = 9, x = 7;
  EXPECT_EQ(sol.minimumJumps(forbidden, a, b, x), 2);
}

TEST(kk, t4) {
  Solution sol;
  vector<int> forbidden = {18, 13, 3, 9, 8, 14};
  int a = 3, b = 8, x = 6;
  EXPECT_EQ(sol.minimumJumps(forbidden, a, b, x), -1);
}

TEST(kk, t5) {
  Solution sol;
  vector<int> forbidden = {
      162, 118, 178, 152, 167, 100, 40,  74,  199, 186, 26, 73,  200, 127,
      30,  124, 193, 84,  184, 36,  103, 149, 153, 9,   54, 154, 133, 95,
      45,  198, 79,  157, 64,  122, 59,  71,  48,  177, 82, 35,  14,  176,
      16,  108, 111, 6,   168, 31,  134, 164, 136, 72,  98};
  int a = 29, b = 98, x = 80;
  EXPECT_EQ(sol.minimumJumps(forbidden, a, b, x), 121);
}

TEST(kk, t6) {
  Solution sol;
  vector<int> forbidden = {
      1895, 849,  784,  1055, 446,  1612, 309,  1018, 1568, 1182, 403,  1224,
      1003, 879,  833,  86,   455,  1867, 563,  233,  1665, 1554, 1488, 1866,
      1656, 1306, 1075, 763,  213,  643,  553,  600,  669,  644,  1450, 522,
      1321, 1344, 1687, 368,  1286, 1872, 1292, 1234, 1303, 998,  1202, 212,
      1337, 949,  1151, 1833, 635,  832,  901,  489,  568,  1458, 1392, 887,
      1240, 416,  1996, 1022, 387,  1120, 1184, 1649, 1198, 967,  382,  1213,
      1636, 1527, 315,  933,  491,  1050, 1659, 180,  35,   1215, 316,  79,
      598,  218,  1099, 614,  278,  1063, 1355, 525,  258,  570,  327,  82,
      1919, 389,  78,   1523, 1187, 633,  1456, 622,  1506, 1282, 1004, 1757,
      621,  765,  1761, 1141, 1191, 871,  390,  1791, 1706, 277,  1465, 323,
      1370, 1752, 1935, 1131, 1729, 116,  900,  1127, 1508, 300,  103,  1457,
      893,  1808, 6,    950,  1503, 1041, 1363, 603,  944,  1449, 1014, 732,
      846,  819,  992,  28,   1301, 845,  111,  1438, 1139, 1090, 1677, 1245,
      349,  1575, 437,  1203, 1619, 1498, 817,  1478, 1064, 695,  163,  1807,
      461,  1445, 49,   1146, 769,  235,  852,  1404, 1651, 999,  62,   342,
      808,  1844, 516,  650,  1277, 791,  1620, 60,   956,  1993, 1469, 1539,
      551,  1737, 90,   1218, 1622, 292,  70,   579,  463,  423,  562,  490,
      1692, 1817, 1785, 1778, 1020, 1132, 878,  1855, 1204, 807,  1027, 1695,
      1631, 355,  962,  487,  1949, 601,  1843, 639};
  int a = 11, b = 11, x = 1991;
  EXPECT_EQ(sol.minimumJumps(forbidden, a, b, x), 181);
}

