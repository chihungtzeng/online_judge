#include <glog/logging.h>
#include <glog/stl_logging.h>

#include <algorithm>
#include <climits>
#include <cstdint>
#include <iostream>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;

class Solution {
 public:
  int maxNonOverlapping(vector<int>& nums, int target) {
    unordered_map<int, int> psum;
    vector<int> dp(nums.size(), 0);
    psum[0] = 0;
    psum[nums[0]] = 0;
    if (nums[0] == target)
      dp[0] = 1;
    else
      dp[0] = 0;
    int s = nums[0];
    for (int i = 1; i < nums.size(); i++) {
      for(auto& it: psum){
        LOG(INFO) << "psum " << it.first << " : " << it.second;
      }
      LOG(INFO) << "dp: " << dp;
      s += nums[i];
      // LOG(INFO) << "s: " << s;
      auto it = psum.find(s - target);
      if (it == psum.end()) {
        LOG(INFO) << "Not found s: " << s << ", use dp[i-1]";
        dp[i] = dp[i - 1];
      } else {
#if 0
        if (nums[i] == 0 && target != 0){
          dp[i] = dp[i - 1];
        } else
#endif
        LOG(INFO) << "it->second: " << it->second << ", dp[it->second]:" << dp[it->second];
        dp[i] = max(dp[i - 1], dp[it->second] + 1);
      }
      psum[s] = i;
    }
    return dp.back();
  }
};
