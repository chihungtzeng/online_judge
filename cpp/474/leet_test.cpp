#include "leet.cpp"

#include <gtest/gtest.h>

#include <cassert>

#include "glog/logging.h"
#include "glog/stl_logging.h"

TEST(kk, t1) {
  Solution sol;
  vector<string> strs = {"10", "0001", "111001", "1", "0"};
  int m = 5, n = 3;
  EXPECT_EQ(sol.findMaxForm(strs, m, n), 4);
}

TEST(kk, t2) {
  Solution sol;
  vector<string> strs = {"10", "0", "1"};
  int m = 1, n = 1;
  EXPECT_EQ(sol.findMaxForm(strs, m, n), 2);
}

TEST(kk, t3) {
  Solution sol;
  vector<string> strs = {"11111", "100", "1101", "1101", "11000"};

  int m = 5, n = 7;
  EXPECT_EQ(sol.findMaxForm(strs, m, n), 3);
}

TEST(kk, t4) {
  Solution sol;
  vector<string> strs = {
      "0",     "11",   "1000", "01",   "0", "101",     "1", "1",  "1",  "0",
      "0",     "0",    "0",    "1",    "0", "0110101", "0", "11", "01", "00",
      "01111", "0011", "1",    "1000", "0", "11101",   "1", "0",  "10", "0111"};

  int m = 9, n = 80;
  EXPECT_EQ(sol.findMaxForm(strs, m, n), 17);
}

TEST(kk, t5) {
  Solution sol;
  vector<string> strs = {
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0",
      "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0"};
  LOG(INFO) << "str size: " << strs.size();

  int m = 30, n = 30;
  EXPECT_EQ(sol.findMaxForm(strs, m, n), 60);
}
TEST(kk, t6) {
  Solution sol;
  vector<string> strs = {
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01", "11", "01",
      "11", "01", "11", "01", "11", "01", "11", "01", "11", "01"};

  LOG(INFO) << "str size: " << strs.size();
  int m = 50, n = 50;
  EXPECT_EQ(sol.findMaxForm(strs, m, n), 50);
}

